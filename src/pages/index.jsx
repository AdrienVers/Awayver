import Head from "next/head";
import styled from "@emotion/styled";
import React, { useEffect, useState, FormEvent } from "react";
import Image from "next/image";
import {
	POSTS_DATA,
	PUBLISH_DATA,
	PUBLICATIONS_DATA,
} from "../components/Home/publishData";
import User from "../assets/UserGreen.png";
import { useSession } from "next-auth/react";
// import Script from "next/script";
// import { PickerOverlay } from "filestack-react";
import { supabase } from "../utils/supabase";

function Home() {
	const { data: session } = useSession();

	const [data, setData] = useState([]);
	const [editMode, setEditMode] = useState(false);
	const [inputedData, setInputedData] = useState({
		id: "",
		title: "",
		content: "",
	});
	const [activePublishModale, setActivePublishModale] = useState(false);
	const [activeEditModale, setActiveEditModale] = useState(false);

	const [isPicker, setIsPicker] = useState(false);
	const [image, setImage] = useState("");

	const [imageUrl, setImageUrl] = useState("");

	const [inputs, setInputs] = useState([
		{ value: "", visible: true },
		{ value: "", visible: false },
		{ value: "", visible: false },
	]);

	const handleUpload = async (e) => {
		let file;

		if (e.target.files) {
			file = e.target.files[0];
		}

		const { data, error } = await supabase.storage
			.from("images")
			.upload("public/" + file?.name, file);

		if (data) {
			const publicUrl = await supabase.storage
				.from("images")
				.getPublicUrl(data.path);
			console.log(publicUrl);
			setImageUrl(publicUrl.data.publicUrl);
		} else if (error) {
			console.log(error);
		}
	};

	const fetchData = async () => {
		const res = await fetch("/api/post/getdata");
		const json = await res.json();
		setData(json);
	};

	const handleCreateData = async (e) => {
		e.preventDefault();

		if (editMode) {
			handleUpdateData();
		} else {
			const res = await fetch("/api/post/createdata", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					title: inputedData.title,
					content: inputedData.content,
					image: imageUrl,
					ownerName: session.user.name,
					ownerPicture: session.user.image,
					tags: [inputs[0].value, inputs[1].value, inputs[2].value],
				}),
			});
			const json = await res.json();
			setInputedData({ id: "", title: "", content: "" });
			fetchData();
			setActiveEditModale(false);
			setActivePublishModale(false);
		}
	};

	const handleEditData = async (id, title, content) => {
		setInputedData({ id, title, content });
		setEditMode(true);
	};

	const handleUpdateData = async () => {
		const res = await fetch("/api/post/updatedata", {
			method: "PUT",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				id: inputedData.id,
				title: inputedData.title,
				content: inputedData.content,
				image: imageUrl,
				ownerName: session.user.name,
				ownerPicture: session.user.image,
				tags: [inputs[0].value, inputs[1].value, inputs[2].value],
			}),
		});
		const json = await res.json();
		setInputedData({ id: "", title: "", content: "" });
		setEditMode(false);
		fetchData();
		setActiveEditModale(false);
		setActivePublishModale(false);
	};

	const handleDeleteData = async (id) => {
		const res = await fetch("/api/post/deletedata", {
			method: "DELETE",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({ id }),
		});
		const json = await res.json();
		fetchData();
	};

	const handleInputChange = (e, index) => {
		const updatedInputs = [...inputs];
		updatedInputs[index].value = e.target.value;

		if (index === 0 && e.target.value !== "") {
			updatedInputs[1].visible = true;
		}

		if (index === 1 && e.target.value !== "") {
			updatedInputs[2].visible = true;
		}

		setInputs(updatedInputs);
	};

	function handleOpenWidget() {
		let myWidget = window.cloudinary.createUploadWidget(
			{
				cloudName: "dwts3tifx",
				uploadPreset: "cloudact",
			},
			(error, result) => {
				if (!error && result && result.event === "success") {
					console.log("Done! Here is the image info: ", result.info);
				}
			},
		);
	}

	useEffect(() => {
		fetchData();
	}, []);

	const openWidget = () => {
		// create the widget
		const widget = window.cloudinary.createUploadWidget(
			{
				cloudName: "",
				uploadPreset: "",
			},
			(error, result) => {
				if (
					result.event === "success" &&
					result.info.resource_type === "image"
				) {
					console.log(result.info);
					setImagePublicId(result.info.public_id);
				}
			},
		);
		widget.open(); // open up the widget after creation
	};

	return (
		<HomeGlobal>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			{/* <Script src="https://widget.Cloudinary.com/v2.0/global/all.js" /> */}
			{activePublishModale ? (
				<PublishModale onSubmit={handleCreateData}>
					<div className="PublishModaleLayout">
						<div className="PublishModaleHeader">
							<div className="PublishModaleName">
								{session ? (
									<Image
										className="PublishModaleUserPicture"
										alt="Utilisateur"
										src={
											session &&
											session.user &&
											typeof session.user.image === "string"
												? session.user.image
												: User
										}
										width={300}
										height={300}
									/>
								) : (
									<Image
										className="PublishModaleUserPicture"
										alt="Utilisateur"
										src={User}
									/>
								)}
								{session ? (
									<span className="PublishModaleUserName">
										{session &&
										session.user &&
										typeof session.user.name === "string"
											? session.user.name.charAt(0).toUpperCase() +
											  session.user.name.slice(1)
											: null}
									</span>
								) : (
									<span className="PublishModaleUserName">Anonyme</span>
								)}
								<span className="CategorySeperation"> | </span>
								<select
									className="CategoryFilter"
									value={inputedData.title}
									onChange={(e) =>
										setInputedData({ ...inputedData, title: e.target.value })
									}
								>
									<option value="">Cat√©gorie ?</option>
									{PUBLISH_DATA.map((category, index) => (
										<option
											style={{ backgroundColor: "white" }}
											key={index}
											value={category.name}
										>
											{category.name}
										</option>
									))}
								</select>
							</div>
							<i
								id="Xmark"
								className="fa-solid fa-xmark"
								onClick={() => {
									setIsPicker(false);
									setActivePublishModale(!activePublishModale);
								}}
							/>
						</div>
						<div className="ModalContent">
							<div className="PublishModaleText">
								<textarea
									placeholder="Envie de partager ?"
									value={inputedData.content}
									onChange={(e) =>
										setInputedData({ ...inputedData, content: e.target.value })
									}
								/>
							</div>
							<div className="PublishModaleImage">
								{imageUrl ? (
									<Image
										src={imageUrl}
										alt="uploaded image"
										width={300}
										height={300}
									/>
								) : (
									<input
										type="file"
										id="file-input"
										accept="image/*"
										placeholder="Joindre une image"
										onChange={(e) => handleUpload(e)}
									/>
									/*
									<div
										className="AddImage"
										// onClick={() => setIsPicker(true)}
										// onClick={() => handleOpenWidget()}
										// onClick={openWidget}
										type="button"
									>
										<i className="fa-solid fa-paperclip" />
										<span>Joindre une image</span>
									</div>
									*/
								)}
							</div>
							<div className="mt-4 relative" style={{ backgroundColor: "red" }}>
								{isPicker && (
									/*
									<PickerOverlay
										apikey={process.env.NEXT_PUBLIC_API_KEY}
										onSuccess={(res) => {
											setImage(res);
											setIsPicker(false);
										}}
										onError={(res) => {
											alert(res);
										}}
										pickerOptions={{
											maxFiles: 1,
											accept: ["image/*"],
											errorsTimeout: 2000,
											maxSize: 1 * 1000 * 1000,
											onClose: () => setIsPicker(false),
										}}
									/>
									*/
									<></>
								)}
							</div>
						</div>
						<div className="PublishModaleFooter">
							<div className="PublishModaleTag">
								{inputs.map((input, index) => (
									<input
										key={index}
										placeholder="Ajouter un tag"
										style={{ display: input.visible ? "block" : "none" }}
										value={input.value}
										onChange={(e) => handleInputChange(e, index)}
									/>
								))}
							</div>
							<button type="submit">Publier</button>
						</div>
					</div>
				</PublishModale>
			) : null}
			<br />
			<PublishGlobal>
				<div className="ShareInput">
					{session ? (
						<Image
							className="SharePicture"
							alt="Utilisateur"
							src={
								session &&
								session.user &&
								typeof session.user.image === "string"
									? session.user.image
									: User
							}
							width={300}
							height={300}
						/>
					) : (
						<Image className="SharePicture" alt="Utilisateur" src={User} />
					)}
					<input
						type="text"
						placeholder="Envie de partager ?"
						onClick={() => setActivePublishModale(!activePublishModale)}
					/>
				</div>
				<div className="ShareIllustrations">
					{PUBLISH_DATA.map((illustration) => {
						return (
							<p
								key={illustration.id}
								className="ShareEvent"
								onClick={() => setActivePublishModale(!activePublishModale)}
							>
								<i className={illustration.icon} />{" "}
								<span>{illustration.name}</span>
							</p>
						);
					})}
					<button onClick={() => setActivePublishModale(!activePublishModale)}>
						Publier
					</button>
				</div>
			</PublishGlobal>
			<br />
			{data.map((item, index) => (
				<PostGlobal key={item.id}>
					<div className="PostHeader">
						<div className="PostProfil">
							<Image
								className="PostPicture"
								alt="imageUploded"
								src={item.ownerPicture}
								width={300}
								height={300}
							/>
							<p>{item.ownerName}</p>
							<p style={{ padding: "0px 15px" }}> | </p>
							<p style={{ color: "rgb(50, 130, 110)" }}>
								<i
									style={{ paddingRight: "5px" }}
									className="fa-solid fa-compass"
								/>{" "}
								<span>{item.title}</span>
							</p>
						</div>
						{activeEditModale ? (
							<EditModale>
								<i
									style={{ paddingBottom: "18px" }}
									className="fa-solid fa-ellipsis"
									onClick={() => {
										setActiveEditModale(!activeEditModale);
									}}
								/>
								<i
									className="fa-solid fa-pen-to-square"
									onClick={() => {
										handleEditData(item.id, item.title, item.content);
										setActiveEditModale(false);
										setActivePublishModale(!activePublishModale);
									}}
								/>
								<br />
								<i
									className="fa-solid fa-trash"
									onClick={() => handleDeleteData(item.id)}
								/>
							</EditModale>
						) : (
							<i
								id="EditIcon"
								className="fa-solid fa-ellipsis-vertical"
								onClick={() => setActiveEditModale(!activeEditModale)}
							/>
						)}
					</div>
					<div className="PostSeparationHeader" />
					<div className="PostContent">
						<div className="PostText">
							<p>{item.content}</p>
							<p>
								{item.tags.map((tag, index) => {
									return (
										<span className="PostTags" key={index}>
											{tag !== "" ? <button>{tag}</button> : null}
										</span>
									);
								})}
							</p>
						</div>
						<div className="PostImage">
							<Image
								className="Image"
								src={item.image}
								alt="Budapest"
								width={300}
								height={300}
							/>
						</div>
					</div>
					<div className="PostSeparationContent" />
					<div className="PostReaction">
						<span>
							<i className="fa-solid fa-thumbs-up" />0
						</span>
						<span>0 commentaires</span>
					</div>
					<div className="PostSeparationFooter" />
					<div className="PostFooter">
						{POSTS_DATA.map((icon) => {
							return (
								<p key={icon.id}>
									<i className={icon.icon} /> <span>{icon.name}</span>
								</p>
							);
						})}
					</div>
				</PostGlobal>
			))}
			{PUBLICATIONS_DATA.map((item, index) => {
				return (
					<PostGlobal key={item.id}>
						<div className="PostHeader">
							<div className="PostProfil">
								<Image
									className="PostPicture"
									src={item.ownerPicture}
									alt="Utilisateur"
								/>
								<p>{item.owner}</p>
								<p style={{ padding: "0px 15px" }}> | </p>
								<p style={{ color: "rgb(50, 130, 110)" }}>
									<i style={{ paddingRight: "5px" }} className={item.icon} />{" "}
									<span>{item.category}</span>
								</p>
							</div>
							<i className="fa-solid fa-ellipsis-vertical" />
						</div>
						<div className="PostSeparationHeader" />
						<div className="PostContent">
							<div className="PostText">
								<p>{item.content}</p>
								<p>
									{item.tags.map((tag, index) => {
										return <button key={tag.id}>{tag.name}</button>;
									})}
								</p>
							</div>
							<div className="PostImage">
								<Image className="Image" src={item.image} alt="Budapest" />
							</div>
						</div>
						<div className="PostSeparationContent" />
						<div className="PostReaction">
							<span>
								<i className="fa-solid fa-thumbs-up" />
								{item.likes}
							</span>
							<span>{item.commentsNumber} commentaires</span>
						</div>
						<div className="PostSeparationFooter" />
						<div className="PostFooter">
							{POSTS_DATA.map((icon) => {
								return (
									<p key={icon.id}>
										<i className={icon.icon} /> <span>{icon.name}</span>
									</p>
								);
							})}
						</div>
					</PostGlobal>
				);
			})}
		</HomeGlobal>
	);
}

export default Home;

const HomeGlobal = styled.div`
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	background-color: rgb(240, 240, 240);
`;

const PublishGlobal = styled.div`
	display: flex;
	flex-direction: column;
	width: 80%;
	// background-color: rgb(240, 240, 240);
	background-color: white;
	box-shadow: inset 0px 0px 0px 1px rgb(190, 190, 190);
	// padding: 30px 40px 25px 40px;
	padding: 20px 30px 10px 30px;
	border-radius: 20px;

	@media (max-width: 600px) {
		width: 90%;
		padding: 10px;
	}

	.ShareInput {
		width: 100%;
		display: flex;
		align-items: center;
		background: linear-gradient(0deg, rgb(51, 128, 109), rgb(63, 186, 128));
		border-radius: 20px;
		position: relative;

		.SharePicture {
			width: 50px;
			height: 50px;
			border-radius: 50px;
			margin: 10px 20px 10px 15px;

			@media (max-width: 600px) {
				width: 40px;
				height: 40px;
				border-radius: 40px;
				margin: 10px 8px;
			}
		}

		input {
			height: 50px;
			width: calc(100% - 110px);
			border-radius: 50px;
			padding-left: 15px;
			font-size: 1.05rem;
			border: none;
			box-shadow: inset 0px 0px 0px 0.5px black;

			&:hover {
				cursor: pointer;
			}

			@media (max-width: 600px) {
				width: calc(100% - 70px);
				height: 40px;
			}
		}

		i {
			position: absolute;
			top: 26px;
			right: 45px;
			transform: rotate(160deg);

			&:hover {
				cursor: pointer;
				color: rgb(50, 130, 110);
			}
		}
	}

	.ShareIllustrations {
		width: 100%;
		display: flex;
		justify-content: space-around;
		align-items: center;
		font-size: 1.1rem;
		margin-top: 10px;
		padding: 10px 0px;

		.ShareEvent {
			margin: 0;
			color: rgb(50, 130, 110);
			padding: 2px 10px 5px 10px;
			box-shadow: inset 0px 0px 0px 1px rgb(50, 130, 110);
			border-radius: 50px;
			display: flex;
			align-items: center;
			justify-content: center;
			text-align: center;

			i {
				padding: 2px 10px 0px 2px;
			}

			@media (max-width: 1000px) {
				height: 30px;
				width: 30px;

				i {
					padding: 2px 2px 0px 2px;
					font-size: 0.9rem;
				}
			}

			@media (max-width: 600px) {
				i {
					padding: 3px 0px 0px 0px;
					font-size: 0.9rem;
				}
			}

			&:hover {
				cursor: pointer;
				color: white;
				background-color: rgb(50, 130, 110);

				i {
					color: white;
				}
			}

			span {
				@media (max-width: 1000px) {
					display: none;
				}
			}
		}

		button {
			border: none;
			box-shadow: inset 0px 0px 0px 1px white;
			// background-color: rgb(60, 175, 125);
			background-color: rgb(50, 130, 110);
			color: white;
			border-radius: 50px;
			padding: 8px 15px;
			font-size: 1.2rem;

			&:hover {
				cursor: pointer;
			}

			@media (max-width: 600px) {
				font-size: 1rem;
				padding: 8px 10px;
			}
		}
	}
`;

const PostGlobal = styled.div`
	display: flex;
	flex-direction: column;
	width: 80%;
	background-color: white;
	padding: 10px 40px 15px 40px;
	border-radius: 20px;
	box-shadow: inset 0px 0px 0px 1px rgb(190, 190, 190);
	margin-bottom: 30px;

	@media (max-width: 600px) {
		width: 90%;
		padding: 10px;
	}

	.PostHeader {
		display: flex;
		align-items: center;
		justify-content: space-between;
		font-size: 1.1rem;
		position: relative;

		@media (max-width: 600px) {
			padding-right: 10px;
		}

		#EditIcon {
			padding: 5px;

			@media (max-width: 600px) {
				padding: 0px 5px 0px 0px;
				font-size: 0.9rem;
			}
		}

		.PostProfil {
			display: flex;
			align-items: center;

			.PostPicture {
				width: 50px;
				height: 50px;
				background-size: contain;
				border-radius: 50px;
				margin: 10px 20px 10px 15px;

				@media (max-width: 600px) {
					width: 40px;
					height: 40px;
					border-radius: 40px;
				}
			}

			p {
				margin: 0;
			}

			span {
				@media (max-width: 600px) {
					display: none;
				}
			}
		}

		i {
			&:hover {
				cursor: pointer;
			}
		}
	}

	.PostContent {
		display: flex;

		@media (max-width: 900px) {
			flex-direction: column;
		}

		.PostText {
			width: 50%;
			max-height: 100%;
			display: flex;
			padding: 10px 10px 15px 10px;
			font-size: 1.1rem;
			flex-direction: column;
			justify-content: space-between;

			@media (max-width: 900px) {
				width: 100%;
			}

			p {
				line-height: 1.6rem;
				margin: 0;
			}

			button {
				border: none;
				color: black;
				background-color: rgb(240, 240, 240);
				margin: 10px 10px 0px 0px;
				font-size: 1rem;
				padding: 5px 10px;
				border-radius: 10px;

				@media (max-width: 600px) {
					margin: 5px 5px 0px 0px;
				}

				&:hover {
					cursor: pointer;
				}
			}
		}

		.PostImage {
			width: 50%;
			display: flex;
			align-items: center;
			justify-content: center;

			@media (max-width: 900px) {
				width: 100%;
			}

			.Image {
				width: 70%;
				height: auto;
				padding: 5px 0px;
			}
		}
	}

	.PostReaction {
		display: flex;
		align-items: center;
		justify-content: space-between;
		font-size: 1.1rem;
		padding: 0px 10px;

		span {
			display: flex;
			align-items: center;

			i {
				display: flex;
				align-items: center;
				justify-content: center;
				color: white;
				height: 25px;
				width: 25px;
				background-color: rgb(50, 130, 110);
				border-radius: 50px;
				font-size: 0.9rem;
				margin-right: 5px;
				padding-bottom: 2px;
			}
		}
	}

	.PostSeparationHeader,
	.PostSeparationContent,
	.PostSeparationFooter {
		height: 0.8px;
		widtht: 100%;
		border-radius: 2px;
		background-color: rgb(200, 200, 200);
	}

	.PostSeparationHeader {
		margin: 5px 0px 5px 0px;

		@media (max-width: 600px) {
			margin: 5px 0px 2px 0px;
		}
	}

	.PostSeparationContent {
		margin: 20px 0px 10px 0px;
	}

	.PostSeparationFooter {
		margin: 10px 0px 10px 0px;
	}

	.PostFooter {
		display: flex;
		align-items: center;
		justify-content: space-around;
		font-size: 1.1rem;

		&:hover {
			cursor: pointer;
		}

		p {
			margin: 0;
		}

		span {
			@media (max-width: 600px) {
				display: none;
			}
		}

		i {
			margin-right: 5px;
			color: rgb(50, 130, 110);
		}
	}
`;

const PublishModale = styled.form`
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgba(0, 0, 0, 0.6);
	display: flex;
	align-items: center;
	justify-content: center;
	z-index: 2;
	padding: 20px 0px;
	margin-top: 20px;

	.PublishModaleLayout {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: space-between;
		width: 80%;
		height: 80%;
		background-color: white;
		border-radius: 10px;
		padding: 20px;

		@media (max-width: 600px) {
			width: 90%;
			padding: 10px;
		}

		.PublishModaleHeader {
			display: flex;
			justify-content: space-between;
			width: 100%;

			@media (max-width: 600px) {
				align-items: center;
			}

			#Xmark {
				font-size: 1.2rem;
				margin-right: 6px;

				&:hover {
					cursor: pointer;
				}
			}

			.CategorySeperation {
				padding: 0px 10px 0px 0px;

				@media (max-width: 600px) {
					padding: 0px 5px 0px 0px;
				}
			}

			select {
				position: relative;
				padding: 8px;
				font-size: 0.9rem;
				appearance: none;
				background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23131313%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
				background-repeat: no-repeat;
				background-position: right 0.6rem top 50%;
				background-size: 0.6rem auto;
				background-color: white;
				width: 110px;
				border-radius: 5px;

				&:hover {
					cursor: pointer;
				}

				@media (max-width: 600px) {
					padding: 7px 6px;
				}
			}

			.PublishModaleName {
				display: flex;
				align-items: center;
				width: 100%;
				padding: 0px 10px;

				span {
					margin: 0px 5px;

					@media (max-width: 600px) {
						margin: 0px 3px;
					}
				}

				i {
					margin: 4px 0px 0px 4px;

					@media (max-width: 600px) {
						margin: 0px 0px 0px 4px;
					}
				}

				.PublishModaleUserPicture {
					width: 50px;
					height: 50px;
					background-size: contain;
					border-radius: 50px;
					margin-right: 10px;

					@media (max-width: 600px) {
						width: 40px;
						height: 40px;
						border-radius: 40px;
						margin-right: 5px;
					}
				}

				.PublishModaleUserName {
					font-size: 1.2rem;

					@media (max-width: 600px) {
						font-size: 0.95rem;
					}
				}
			}
		}

		.ModalContent {
			display: flex;
			box-sizing: border-box;
			width: 100%;
			height: 80%;

			@media (max-width: 800px) {
				flex-direction: column;
			}

			.PublishModaleText {
				width: 50%;
				padding: 10px;

				@media (max-width: 800px) {
					width: 100%;
					min-height: 50%;
					padding: 10px 0px;
				}

				textarea {
					width: 100%;
					height: 100%;
					resize: none;
					font-family: inherit;
					padding: 10px;
					border-radius: 10px;
					font-size: 1.05rem;

					@media (max-width: 600px) {
						font-size: 0.9rem;
					}
				}
			}

			.PublishModaleImage {
				width: 50%;
				height: auto;
				display: flex;
				align-items: center;
				justify-content: center;

				@media (max-width: 800px) {
					width: 100%;
					min-height: 50%;
				}

				.AddImage {
					padding: 8px 8px 7px 8px;
					border-radius: 30px;
					border: none;

					&:hover {
						cursor: pointer;
					}

					i {
						transform: rotate(160deg);
						font-size: 1.2rem;
						margin: 0px 10px;

						@media (max-width: 600px) {
							margin-bottom: 2px;
						}
					}

					span {
						font-size: 1.05rem;
					}

					&:hover {
						cursor: pointer;
						color: rgb(50, 130, 110);
					}
				}

				.Image {
					max-width: 350px;
					width: 85%;
					height: auto;
					padding: 5px;

					@media (max-width: 800px) {
						height: 90%;
						width: auto;
					}
				}
			}
		}

		.PublishModaleFooter {
			display: flex;
			align-items: center;
			justify-content: space-between;
			width: 100%;

			.PublishModaleTag {
				display: flex;
				padding-left: 10px;

				@media (max-width: 800px) {
					padding-left: 2px;
				}

				input {
					padding: 7px 6px;
					width: 115px;
					font-size: 1rem;
					border-radius: 5px;
					border: none;
					box-shadow: inset 0px 0px 0px 0.3px black;
					margin-right: 5px;

					@media (max-width: 800px) {
						padding: 5px 4px;
						width: 90px;
						font-size: 0.8rem;
					}

					@media (max-width: 600px) {
						padding: 4px 2px;
						font-size: 0.65rem;
						width: 70px;
						margin-right: 5px;
					}
				}

				span {
					padding: 0px 5px;

					@media (max-width: 800px) {
						font-size: 0.8rem;
						padding: 0px 3px;
					}
				}
			}

			button {
				border: none;
				box-shadow: inset 0px 0px 0px 1px white;
				// background-color: rgb(60, 175, 125);
				background-color: rgb(50, 130, 110);
				color: white;
				border-radius: 50px;
				padding: 8px 15px;
				font-size: 1.2rem;

				&:hover {
					cursor: pointer;
				}

				@media (max-width: 600px) {
					font-size: 1rem;
					padding: 8px 10px;
				}
			}
		}
	}
`;

const EditModale = styled.div`
	display: flex;
	flex-direction: column;
	align-items: center;
	position: absolute;
	top: 15px;
	right: -17px;
	background-color: rgb(50, 130, 110);
	color: white;
	border-radius: 5px;
	padding: 10px;

	@media (max-width: 600px) {
		top: 12px;
		right: 4px;
		font-size: 0.9rem;
	}
`;

// https://i.imgur.com/ToVmRfV.png
